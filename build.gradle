plugins {
	id 'org.springframework.boot' version '2.4.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.8'
	id 'java'
	id 'jacoco'
}

group = 'com.100.percent.capstone'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.4.6'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	/*
	 * JJWT is used to help generate and parse JSON web tokens.
	 */
	compile 'io.jsonwebtoken:jjwt-api:0.11.1'
	runtime 'io.jsonwebtoken:jjwt-impl:0.11.1'
	runtime	 'io.jsonwebtoken:jjwt-jackson:0.11.1'

	/*
	 * Spring security dependencies and implementation
	 */
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	//Sentry SDK dependency
	implementation 'io.sentry:sentry:4.3.0'
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.6"
}
jacocoTestReport {
	reports {
		dependsOn test // tests are required to run before generating the report
		html.destination layout.buildDirectory.dir('reports/jacocoHtml').get().asFile
	}

}
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			limit {
				minimum = 0.85
			}
		}
	}
}
asciidoctor {
	inputs.dir snippetsDir
	attributes 'snippets': snippetsDir
	dependsOn test
}

bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}
